version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: ecommerce_db
    restart: always
    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: your_secure_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ecommerce_network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce_network

  # Backend API
  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: ecommerce_backend
    restart: always
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      DB_HOST: db
      DB_NAME: ecommerce_db
      DB_USER: postgres
      DB_PASSWORD: your_secure_password
      DB_PORT: 5432
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your_jwt_secret_key
      JWT_EXPIRE: 7d
      STRIPE_SECRET_KEY: your_stripe_secret_key
      EMAIL_HOST: smtp.sendgrid.net
      EMAIL_PORT: 587
      EMAIL_USER: apikey
      EMAIL_PASS: your_sendgrid_api_key
      FRONTEND_URL: http://localhost:3000
    depends_on:
      - db
      - redis
    networks:
      - ecommerce_network

  # Frontend (React App)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ecommerce_frontend
    restart: always
    ports:
      - "3000:3000"
    environment:
      REACT_APP_API_URL: http://localhost:5000
    depends_on:
      - backend
    networks:
      - ecommerce_network

volumes:
  postgres_data:
  redis_data:

networks:
  ecommerce_network:
    driver: bridge