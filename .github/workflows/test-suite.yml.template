# GitHub Actions Workflow - Multi-AI Orchestrium Test Suite
# P0.2.3.3: CI/CD統合設計（実装テンプレート）
#
# このファイルは .github/workflows/test-suite.yml にコピーして使用
# 実装は後回し（P1タスク）、設計のみ完了

name: Test Suite

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:  # 手動実行を許可

# 環境変数
env:
  BATS_VERSION: "1.12.0"
  NODE_VERSION: "18"

jobs:
  # ============================================================================
  # Job 1: ユニットテスト (bats-core)
  # ============================================================================
  unit-tests:
    name: Unit Tests (bats-core)
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install bats-core
        run: |
          npm install -g bats@${{ env.BATS_VERSION }}
          npm install -g bats-support bats-assert

      - name: Install yq (YAML processor)
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Run unit tests
        run: |
          bash tests/run-unit-tests.sh

      - name: Upload unit test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-reports
          path: tests/reports/unit-test-*.tap
          retention-days: 30

  # ============================================================================
  # Job 2: 統合テスト (Bash scripts)
  # ============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq bc

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Run Phase 1 - File-based prompt tests
        run: |
          bash tests/phase1-file-based-prompt-test.sh || echo "Phase 1 completed with warnings"

      - name: Run Phase 4 - E2E tests
        run: |
          bash tests/phase4-e2e-test.sh || echo "Phase 4 completed with warnings"

      - name: Run Edge case tests
        run: |
          bash tests/integration/test-edge-cases.sh || echo "Edge cases completed with warnings"

      - name: Run Wrapper tests (P0.1.3)
        run: |
          bash tests/integration/test-wrappers-p0-1-3.sh || echo "Wrapper tests completed with warnings"

      - name: Run Job Pool tests (P0.3)
        run: |
          bash tests/integration/test-job-pool.sh || echo "Job Pool tests completed with warnings"

      - name: Upload integration test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-logs
          path: |
            tests/reports/*.log
            logs/**/*.jsonl
          retention-days: 30

  # ============================================================================
  # Job 3: カバレッジレポート生成（将来実装）
  # ============================================================================
  coverage-report:
    name: Coverage Report (Future Implementation)
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Placeholder - Coverage analysis
        run: |
          echo "Coverage analysis will be implemented in P1"
          echo "Current estimated coverage: 85-90%"
          echo "See tests/COVERAGE_ANALYSIS.md for details"

      # 将来実装: bashcov or kcov を使用してカバレッジ測定
      # - name: Install kcov
      #   run: sudo apt-get install -y kcov
      #
      # - name: Run tests with coverage
      #   run: |
      #     kcov --exclude-pattern=/usr coverage/ bash tests/run-all-tests.sh
      #
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     files: ./coverage/kcov-merged/cobertura.xml

  # ============================================================================
  # Job 4: テスト結果サマリー
  # ============================================================================
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate test summary
        run: |
          echo "# Test Suite Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Unit Tests" >> $GITHUB_STEP_SUMMARY
          if [ -d unit-test-reports ]; then
            echo "✅ Unit tests completed" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            find unit-test-reports -name "*.tap" -exec tail -5 {} \; >> $GITHUB_STEP_SUMMARY || true
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No unit test reports found" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Integration Tests" >> $GITHUB_STEP_SUMMARY
          if [ -d integration-test-logs ]; then
            echo "✅ Integration tests completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No integration test logs found" >> $GITHUB_STEP_SUMMARY
          fi

# ============================================================================
# 設計ノート (P0.2.3.3)
# ============================================================================
#
# ## 実装優先度
#
# ### P0（即座）
# - このテンプレートファイル作成 ✅
# - 設計レビュー ✅
#
# ### P1（次スプリント）
# - .github/workflows/ ディレクトリ作成
# - このテンプレートを test-suite.yml にコピー
# - 実際にGitHub Actionsで実行テスト
# - AI CLI モック化（実際のAI APIを使わずにテスト）
#
# ### P2（将来）
# - カバレッジレポート自動生成（kcov or bashcov）
# - Codecov統合
# - Slackなどへの通知
# - パフォーマンス回帰テスト
#
# ## 設計の特徴
#
# 1. **モジュラー設計**: 4つの独立したジョブ
#    - unit-tests: batsユニットテスト
#    - integration-tests: Bash統合テスト
#    - coverage-report: カバレッジ（将来）
#    - test-summary: サマリー生成
#
# 2. **並列実行**: unit-tests と integration-tests は並列実行
#    - 実行時間短縮（15分 + 30分 = 最大30分）
#
# 3. **アーティファクト保存**: 30日間保持
#    - テストレポート（TAP形式）
#    - ログファイル（JSONL形式）
#
# 4. **柔軟なトリガー**:
#    - push (main/develop)
#    - pull_request
#    - workflow_dispatch (手動実行)
#
# 5. **グレースフル失敗**:
#    - テスト失敗してもCI全体は続行
#    - `|| echo "completed with warnings"` で警告として扱う
#
# ## 依存関係
#
# - Node.js 18 (bats-core用)
# - yq (YAML処理)
# - jq, bc (統合テスト用)
# - kcov or bashcov (カバレッジ測定 - 将来)
#
# ## セキュリティ考慮事項
#
# - AI API キーは使用しない（モック化）
# - secrets はリポジトリシークレットで管理
# - アーティファクトは30日で自動削除
#
# ## パフォーマンス目標
#
# - ユニットテスト: <15分
# - 統合テスト: <30分
# - 合計: <35分（並列実行）
#
# ============================================================================
