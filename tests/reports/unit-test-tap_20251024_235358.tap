1..84
ok 1 sanitize_wrapper_input: rejects empty input
ok 2 sanitize_wrapper_input: accepts small safe input (<1KB)
ok 3 sanitize_wrapper_input: blocks dangerous characters in small input (<1KB)
ok 4 sanitize_wrapper_input: accepts medium safe input (1KB-100KB)
ok 5 sanitize_wrapper_input: blocks command injection in medium input (1KB-100KB)
ok 6 sanitize_wrapper_input: accepts large input (>100KB)
not ok 7 handle_wrapper_timeout: returns success for quick process
# (from function `assert_success' in file /home/ryu/.nvm/versions/node/v22.18.0/lib/node_modules/bats-assert/src/assert_success.bash, line 45,
#  in test file tests/unit/test-common-wrapper-lib.bats, line 88)
#   `assert_success' failed
#
# -- command failed --
# status : 255
# output :
# --
#
ok 8 handle_wrapper_timeout: times out slow process
ok 9 handle_wrapper_timeout: sends SIGTERM then SIGKILL
ok 10 format_wrapper_output: formats text output
ok 11 format_wrapper_output: formats JSON output
ok 12 format_wrapper_output: outputs to stderr for text format
ok 13 wrapper_structured_error: outputs what/why/how pattern
ok 14 wrapper_structured_error: returns correct exit code
ok 15 wrapper_structured_error: uses WRAPPER_EXIT constants
ok 16 wrapper_print_stack_trace: outputs stack frames
ok 17 wrapper_print_stack_trace: limits to 20 frames
ok 18 error codes: WRAPPER_EXIT constants are defined
ok 19 integration: sanitize + format output pipeline
ok 20 integration: error handling with stack trace
ok 21 load_multi_ai_profile: loads valid profile successfully # skip Requires yq parsing and file I/O - tested in integration tests
ok 22 load_multi_ai_profile: fails with non-existent profile
ok 23 load_multi_ai_profile: requires yq command # skip yq is in /usr/bin or /bin, cannot test missing yq
ok 24 load_multi_ai_profile: fails with missing config file
ok 25 get_workflow_config: returns workflow name for valid workflow # skip Requires yq parsing and file I/O - tested in integration tests
ok 26 get_workflow_config: fails with non-existent workflow # skip Requires yq parsing and file I/O - tested in integration tests
ok 27 get_workflow_config: fails with empty profile # skip Requires yq parsing and file I/O - tested in integration tests
ok 28 get_phases: returns phase count # skip Requires yq parsing - tested in integration
ok 29 get_phase_info: returns phase name and parallel flag # skip Requires yq parsing - tested in integration
ok 30 get_phase_ai: returns AI name for sequential phase # skip Requires yq parsing - tested in integration
ok 31 get_phase_role: returns role for sequential phase # skip Requires yq parsing - tested in integration
ok 32 get_phase_timeout: returns timeout for sequential phase # skip Requires yq parsing - tested in integration
ok 33 get_parallel_count: returns parallel task count # skip Requires yq parsing - tested in integration
ok 34 get_parallel_ai: returns AI name for parallel task # skip Requires yq parsing - tested in integration
ok 35 get_parallel_role: returns role for parallel task # skip Requires yq parsing - tested in integration
ok 36 get_parallel_timeout: returns timeout for parallel task # skip Requires yq parsing - tested in integration
ok 37 get_parallel_name: returns name for parallel task # skip Requires yq parsing - tested in integration
ok 38 get_parallel_blocking: returns blocking flag for parallel task # skip Requires yq parsing - tested in integration
ok 39 execute_yaml_workflow: requires valid profile # skip Requires full orchestration setup - tested in E2E
ok 40 execute_yaml_workflow: requires valid workflow # skip Requires full orchestration setup - tested in E2E
ok 41 execute_yaml_workflow: handles empty workflow gracefully # skip Requires full orchestration setup - tested in E2E
ok 42 error handling: gracefully handles malformed YAML
ok 43 error handling: handles missing required fields # skip Requires yq parsing and file I/O - tested in integration tests
ok 44 integration: profile loading with valid config # skip Requires yq parsing and file I/O - tested in integration tests
ok 45 integration: multiple profile validation # skip Requires yq parsing and file I/O - tested in integration tests
ok 46 integration: empty workflow handling # skip Requires yq parsing and file I/O - tested in integration tests
ok 47 yaml parsing: handles special characters in profile names # skip Requires yq parsing and file I/O - tested in integration tests
ok 48 yaml parsing: handles unicode characters in phase names # skip Requires yq parsing and file I/O - tested in integration tests
ok 49 edge case: very long profile name
ok 50 edge case: profile name with spaces
ok 51 edge case: empty profile name # skip Requires yq parsing and file I/O - tested in integration tests
ok 52 log_info: outputs info message with icon
ok 53 log_success: outputs success message with icon
ok 54 log_warning: outputs warning message with icon
ok 55 log_error: outputs error message with icon
ok 56 log_phase: outputs phase separator with icon
ok 57 get_timestamp_ms: returns numeric timestamp
ok 58 get_timestamp_ms: returns millisecond precision (13 digits)
ok 59 get_timestamp_ms: increases over time
ok 60 sanitize_input: accepts clean input
ok 61 sanitize_input: rejects semicolon
ok 62 sanitize_input: rejects pipe
ok 63 sanitize_input: rejects dollar sign
ok 64 sanitize_input: rejects redirect operators
ok 65 sanitize_input: rejects ampersand
ok 66 sanitize_input: rejects exclamation mark
ok 67 sanitize_input: accepts large input (>2KB) with relaxed validation
ok 68 sanitize_input: large input (>2KB) allows spaces and newlines
ok 69 sanitize_input: rejects empty input
ok 70 sanitize_input: rejects only whitespace
ok 71 vibe_log: creates log file
ok 72 vibe_log: writes JSON format
ok 73 vibe_pipeline_start: logs pipeline start
ok 74 vibe_pipeline_done: logs pipeline completion
ok 75 vibe_phase_start: logs phase start
ok 76 vibe_phase_done: logs phase completion
ok 77 vibe_summary_done: logs summary generation
ok 78 integration: log functions with sanitize_input
ok 79 integration: timestamp generation and logging
ok 80 integration: VibeLogger pipeline workflow
ok 81 sanitize_input: handles special characters in large input
ok 82 get_timestamp_ms: works across multiple calls
ok 83 vibe_log: handles special characters in metadata
ok 84 log functions: handle empty messages
