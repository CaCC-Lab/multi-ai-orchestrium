#!/usr/bin/env bash
# Multi-AI Core Workflows Library
# Purpose: Core workflow implementations (P1.1.1.1)
# Responsibilities:
#   - full-orchestrate: Balanced 5-8min workflow
#   - speed-prototype: Fast 2-4min workflow (TRUE 7AI participation)
#   - enterprise-quality: Comprehensive 15-20min workflow
#   - hybrid-development: Adaptive workflow (Êé®Â•®)
#   - consensus-review: Consensus-based review
#   - chatdev-develop: Role-based development workflow
#
# Dependencies:
#   - lib/multi-ai-core.sh (logging, utilities)
#   - lib/multi-ai-ai-interface.sh (call_ai_with_context)
#   - lib/multi-ai-config.sh (execute_yaml_workflow)
#
# Usage:
#   source scripts/orchestrate/lib/workflows-core.sh

set -euo pipefail

# ============================================================================
# Core Workflows (5 functions)
# ============================================================================

# Multi-AI Full Orchestrate (5-8ÂàÜ) - Balanced Multi-AI workflow
# P2-1 & P2-2: YAML-driven with parallel execution
multi-ai-full-orchestrate() {
    local task="$*"

    # P1-1: Input sanitization
    task=$(sanitize_input "$task") || return 1

    show_multi_ai_banner
    log_info "Task: $task"
    log_info "Profile: balanced-multi-ai (5-8ÂàÜÊÉ≥ÂÆö)"
    log_info "Mode: YAML-driven with parallel execution"
    echo ""

    # P2-1 & P2-2: Execute workflow using YAML configuration
    execute_yaml_workflow "$DEFAULT_PROFILE" "multi-ai-full-orchestrate" "$task"
}

# Multi-AI Speed Prototype (2-4ÂàÜ)
# TRUE Multi-AI: All 7 AIs participate
multi-ai-speed-prototype() {
    local task="$*"

    # P1-1: Input sanitization
    task=$(sanitize_input "$task") || return 1

    show_multi_ai_banner
    log_info "Task: $task"
    log_info "Profile: speed-first-7ai (TRUE Multi-AI - ÂÖ®AIÂèÇÂä†)"
    echo ""

    # P1-2: Setup work directory
    # P1-2: Setup work directory - persistent logs for audit trail
    local WORK_DIR="$PROJECT_ROOT/logs/multi-ai-reviews/$(date +%Y%m%d-%H%M%S)-$$-full-orchestrate"
    local OUTPUT_DIR="$WORK_DIR/output"
    mkdir -p "$OUTPUT_DIR"
    log_info "Work directory: $WORK_DIR (logs will be preserved)"

    # PHASE 1: Êà¶Áï•„ÉªË®≠Ë®àÂ±§ (Claude, Gemini, Amp - ‰∏¶ÂàóÂÆüË°å)
    log_phase "Phase 1: Strategic Layer (Claude + Gemini + Amp ‰∏¶Âàó)"

    local claude_output="$OUTPUT_DIR/claude_architecture.md"
    local claude_prompt="$task

„Éï„Ç°„Ç§„É´„Éë„Çπ: $PROJECT_ROOT/examples/eva_tetris.py

ÂΩπÂâ≤: CTO - „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„É¨„Éì„É•„Éº
- ÂÖ®‰ΩìË®≠Ë®à„ÅÆÂ¶•ÂΩìÊÄß„ÇíË©ï‰æ°
- ÊäÄË°ìÁöÑ„É™„Çπ„ÇØ„ÇíÁâπÂÆö
- ÊîπÂñÑ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„ÇíÊèêÊ°à"

    local gemini_output="$OUTPUT_DIR/gemini_research.md"
    local gemini_prompt="$task

„Éï„Ç°„Ç§„É´„Éë„Çπ: $PROJECT_ROOT/examples/eva_tetris.py

ÂΩπÂâ≤: CIO - ÊäÄË°ìË™øÊüª
- ‰∏ªË¶Å„Å™ÊäÄË°ì„Çπ„Çø„ÉÉ„ÇØ„ÄÅ„É©„Ç§„Éñ„É©„É™„ÄÅ„Ç¢„Éó„É≠„Éº„ÉÅ„ÇíÊèêÊ°à
- ÊúÄÊñ∞„ÅÆ„Éô„Çπ„Éà„Éó„É©„ÇØ„ÉÜ„Ç£„Çπ„ÇíË™øÊüª"

    local amp_output="$OUTPUT_DIR/amp_project_plan.md"
    local amp_prompt="$task

„Éï„Ç°„Ç§„É´„Éë„Çπ: $PROJECT_ROOT/examples/eva_tetris.py

ÂΩπÂâ≤: PM - „Éó„É≠„Ç∏„Çß„ÇØ„ÉàÁÆ°ÁêÜ
- ÂÆüË£ÖË®àÁîª„ÇíÁ≠ñÂÆö
- „Çø„Çπ„ÇØ„ÅÆÂÑ™ÂÖàÈ†Ü‰Ωç„ÇíÊ±∫ÂÆö
- „É™„Çπ„ÇØÁÆ°ÁêÜË®àÁîª„Çí‰ΩúÊàê"

    # Launch strategic layer in parallel
    call_ai_with_context "claude" "$claude_prompt" 120 "$claude_output" &
    local claude_pid=$!
    call_ai_with_context "gemini" "$gemini_prompt" 180 "$gemini_output" &
    local gemini_pid=$!
    call_ai_with_context "amp" "$amp_prompt" 120 "$amp_output" &
    local amp_pid=$!

    # Wait for all strategic layer AIs
    wait $claude_pid || log_warning "Claude architecture review timed out or failed"
    wait $gemini_pid || log_warning "Gemini research timed out or failed"
    wait $amp_pid || log_warning "Amp planning timed out or failed"

    # Collect strategic layer results
    local architecture=""
    local research=""
    local plan=""
    [ -f "$claude_output" ] && architecture=$(cat "$claude_output")
    [ -f "$gemini_output" ] && research=$(cat "$gemini_output")
    [ -f "$amp_output" ] && plan=$(cat "$amp_output")

    # PHASE 2: ÂÆüË£ÖÂ±§ (Qwen + Droid - ‰∏¶Âàó/ÂÜóÈï∑ÂÆüË°å)
    log_phase "Phase 2: Implementation Layer (Qwen + Droid ‰∏¶ÂàóÁ´∂‰∫â)"

    local qwen_output="$OUTPUT_DIR/qwen_prototype.py"
    local qwen_prompt="„Çø„Çπ„ÇØ: $task

„Éï„Ç°„Ç§„É´„Éë„Çπ: $PROJECT_ROOT/examples/eva_tetris.py

Claude„ÅÆ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„É¨„Éì„É•„Éº:
$architecture

Gemini„ÅÆË™øÊüªÁµêÊûú:
$research

Amp„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„ÉàË®àÁîª:
$plan

ÂΩπÂâ≤: È´òÈÄü„Éó„É≠„Éà„Çø„Ç§„Éë„Éº (ÁõÆÊ®ô37Áßí)
- ‰∏äË®ò„ÇíÂèÇËÄÉ„Å´È´òÈÄü„Éó„É≠„Éà„Çø„Ç§„Éó„ÇíÁîüÊàê
- ÂÆüË°åÂèØËÉΩ„Å™„Ç≥„Éº„Éâ
- Âü∫Êú¨ÁöÑ„Å™„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
- „Ç≥„É°„É≥„Éà‰ªò„Åç

ÈáçË¶Å: „Éï„Ç°„Ç§„É´„ÅØ $PROJECT_ROOT/examples/eva_tetris.py „Å´Â≠òÂú®„Åó„Åæ„Åô„ÄÇ"

    local droid_output="$OUTPUT_DIR/droid_enterprise.py"
    local droid_prompt="„Çø„Çπ„ÇØ: $task

„Éï„Ç°„Ç§„É´„Éë„Çπ: $PROJECT_ROOT/examples/eva_tetris.py

Claude„ÅÆ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„É¨„Éì„É•„Éº:
$architecture

Gemini„ÅÆË™øÊüªÁµêÊûú:
$research

Amp„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„ÉàË®àÁîª:
$plan

ÂΩπÂâ≤: „Ç®„É≥„Çø„Éº„Éó„É©„Ç§„Ç∫„Ç®„É≥„Ç∏„Éã„Ç¢ (ÁõÆÊ®ô180Áßí)
- ‰∏äË®ò„ÇíÂèÇËÄÉ„Å´Êú¨Áï™ÂìÅË≥™„ÅÆ„Ç≥„Éº„Éâ„ÇíÁîüÊàê
- ÂÆåÂÖ®„Å™„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞
- ÂåÖÊã¨ÁöÑ„Å™„Éâ„Ç≠„É•„É°„É≥„Éà
- „Çª„Ç≠„É•„É™„ÉÜ„Ç£„Å®„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÇíËÄÉÊÖÆ

ÈáçË¶Å: „Éï„Ç°„Ç§„É´„ÅØ $PROJECT_ROOT/examples/eva_tetris.py „Å´Â≠òÂú®„Åó„Åæ„Åô„ÄÇ"

    # Launch implementation layer in parallel
    call_ai_with_context "qwen" "$qwen_prompt" 240 "$qwen_output" &
    local qwen_pid=$!
    call_ai_with_context "droid" "$droid_prompt" 900 "$droid_output" &  # 300‚Üí900Áßí: ÂÆüÊ∏¨„Åß600Áßí„Åß„ÇÇÂ§ßË¶èÊ®°„Çø„Çπ„ÇØÂ§±Êïó
    local droid_pid=$!

    # Wait for both implementations
    wait $qwen_pid || log_warning "Qwen prototype timed out or failed"
    wait $droid_pid || log_warning "Droid enterprise implementation timed out or failed"

    # Collect implementation results
    local qwen_impl=""
    local droid_impl=""
    [ -f "$qwen_output" ] && qwen_impl=$(cat "$qwen_output")
    [ -f "$droid_output" ] && droid_impl=$(cat "$droid_output")

    # PHASE 3: „É¨„Éì„É•„ÉºÂ±§ (Codex)
    log_phase "Phase 3: Review Layer (Codex)"

    local codex_output="$OUTPUT_DIR/codex_review.md"
    local codex_prompt="‰ª•‰∏ã„ÅÆ2„Å§„ÅÆÂÆüË£Ö„Çí„É¨„Éì„É•„Éº„Åó„Å¶„Åè„Å†„Åï„ÅÑ:

ÂØæË±°„Éï„Ç°„Ç§„É´: $PROJECT_ROOT/examples/eva_tetris.py

„ÄêQwenÈ´òÈÄü„Éó„É≠„Éà„Çø„Ç§„Éó„Äë:
$qwen_impl

„ÄêDroidÊú¨Áï™ÂÆüË£Ö„Äë:
$droid_impl

„É¨„Éì„É•„ÉºË¶≥ÁÇπ:
1. Qwen vs Droid „ÅÆÊØîËºÉË©ï‰æ°
2. Êòé„Çâ„Åã„Å™„Éê„Ç∞
3. „Çª„Ç≠„É•„É™„ÉÜ„Ç£„É™„Çπ„ÇØ
4. „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂïèÈ°å
5. ÊúÄÁµÇÂÆüË£Ö„Å∏„ÅÆÊé®Â•®‰∫ãÈ†Ö"

    call_ai_with_context "codex" "$codex_prompt" 240 "$codex_output"

    local review=""
    [ -f "$codex_output" ] && review=$(cat "$codex_output")

    # PHASE 4: Áµ±ÂêàÂ±§ (Cursor)
    log_phase "Phase 4: Integration Layer (Cursor)"

    local cursor_output="$OUTPUT_DIR/final_implementation.py"

    # Create highly summarized results for efficient processing
    local strategic_summary="Êà¶Áï•Â±§Ë¶ÅÁÇπ: „Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£-$(( $(echo "$architecture" | wc -l) > 0 ? 1 : 0 ))‰ª∂„ÄÅÊäÄË°ìË™øÊüª-$(( $(echo "$research" | wc -l) > 0 ? 1 : 0 ))‰ª∂„ÄÅ„Éó„É≠„Ç∏„Çß„ÇØ„ÉàË®àÁîª-$(( $(echo "$plan" | wc -l) > 0 ? 1 : 0 ))‰ª∂"
    local implementation_summary="ÂÆüË£ÖÂ±§Ë¶ÅÁÇπ: Qwen-$(( $(echo "$qwen_impl" | wc -l) > 0 ? 1 : 0 ))‰ª∂„ÄÅDroid-$(( $(echo "$droid_impl" | wc -l) > 0 ? 1 : 0 ))‰ª∂„Ç≥„Éº„ÉâÁîüÊàêÂÆå‰∫Ü"
    local review_summary="„É¨„Éì„É•„ÉºÂ±§Ë¶ÅÁÇπ: Codex-$(( $(echo "$review" | wc -l) > 0 ? 1 : 0 ))‰ª∂„ÅÆÊîπÂñÑÊèêÊ°à„ÅÇ„Çä"

    # Create detailed reference files for full context
    echo "$architecture" > "$OUTPUT_DIR/claude_full.txt"
    echo "$research" > "$OUTPUT_DIR/gemini_full.txt"
    echo "$plan" > "$OUTPUT_DIR/amp_full.txt"
    echo "$qwen_impl" > "$OUTPUT_DIR/qwen_full.txt"
    echo "$droid_impl" > "$OUTPUT_DIR/droid_full.txt"
    echo "$review" > "$OUTPUT_DIR/codex_full.txt"

    # Create a shorter reference guide for Cursor
    cat > "$OUTPUT_DIR/reference_guide.txt" << EOF
==== Multi-AI SPEED PROTOTYPE REFERENCE GUIDE ====

TARGET: $PROJECT_ROOT/examples/eva_tetris.py

1. STRATEGIC INPUTS:
$strategic_summary

2. IMPLEMENTATION RESULTS:
$implementation_summary

3. REVIEW FEEDBACK:
$review_summary

4. DETAILED FILES:
- $OUTPUT_DIR/claude_full.txt  # Architecture
- $OUTPUT_DIR/gemini_full.txt  # Research
- $OUTPUT_DIR/amp_full.txt     # Project Plan
- $OUTPUT_DIR/qwen_full.txt    # Qwen Prototype
- $OUTPUT_DIR/droid_full.txt   # Droid Implementation
- $OUTPUT_DIR/codex_full.txt   # Review & Recommendations

5. INTEGRATION OBJECTIVES:
- Merge best elements from Qwen (speed) and Droid (quality)
- Apply Codex review recommendations
- Generate executable, well-tested code
- Add comprehensive test cases

==== END REFERENCE GUIDE ====
EOF

    local cursor_prompt="Áµ±Âêà„Çø„Çπ„ÇØ: $PROJECT_ROOT/examples/eva_tetris.py

Ë¶ÅÁ¥Ñ: Multi-AIÂçîË™ø„Éó„É≠„Çª„Çπ„ÅÆÊàêÊûú„ÇíÁµ±Âêà„Åó„Å¶ÊúÄÁµÇÂÆüË£Ö„ÇíÁîüÊàê

ÂΩπÂâ≤: IDEÁµ±Âêà„Çπ„Éö„Ç∑„É£„É™„Çπ„Éà

Ë¶Å‰ª∂:
- Codex„É¨„Éì„É•„Éº„ÅÆÊé®Â•®‰∫ãÈ†Ö„ÇíÂèçÊò†
- Qwen„ÅÆÈ´òÈÄüÊÄß + Droid„ÅÆÂìÅË≥™„ÇíÁµ±Âêà
- ÂÆüË°åÂèØËÉΩ„Å™„Ç≥„Éº„ÉâÁîüÊàê
- „ÉÜ„Çπ„Éà„Ç±„Éº„ÇπËøΩÂä†

Ë©≥Á¥∞ÊÉÖÂ†±„ÅØ $OUTPUT_DIR/reference_guide.txt „Å´Ë®òËºâ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ

ÈáçË¶Å: ÂäπÁéáÁöÑ„Å™Âá¶ÁêÜ„ÅÆ„Åü„ÇÅ„ÄÅ‰∏äË®òË¶ÅÁ¥Ñ„ÇíÂèÇËÄÉ„Å´„Åó„Å™„Åå„Çâ„ÄÅÂøÖË¶Å„Å´Âøú„Åò„Å¶reference_guide.txt„ÅÆË©≥Á¥∞„Éï„Ç°„Ç§„É´„ÇíÂèÇÁÖß„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"

    call_ai_with_context "cursor" "$cursor_prompt" 900 "$cursor_output"

    # Display results
    echo ""
    log_success "üéâ TRUE Multi-AI Speed Prototype Complete!"
    echo ""
    log_info "Generated Files (7 AIs):"
    ls -lh "$OUTPUT_DIR" 2>/dev/null || log_warning "No files generated"
    echo ""

    if [ -f "$cursor_output" ]; then
        log_info "Final Implementation (CursorÁµ±Âêà):"
        echo ""
        cat "$cursor_output"
    elif [ -f "$droid_output" ]; then
        log_warning "Cursor failed, showing Droid implementation:"
        echo ""
        cat "$droid_output"
    elif [ -f "$qwen_output" ]; then
        log_warning "Droid & Cursor failed, showing Qwen prototype:"
        echo ""
        cat "$qwen_output"
    else
        log_error "No implementation generated"
    fi
    echo ""
}

# Multi-AI Enterprise Quality (15-20ÂàÜ)
# P2-1 & P2-2: YAML-driven with parallel execution
multi-ai-enterprise-quality() {
    local task="$*"

    # P1-1: Input sanitization
    task=$(sanitize_input "$task") || return 1

    show_multi_ai_banner
    log_info "Task: $task"
    log_info "Profile: balanced-multi-ai (15-20ÂàÜÊÉ≥ÂÆö)"
    log_info "Workflow: multi-ai-enterprise-quality"
    log_info "Mode: YAML-driven with parallel execution"
    echo ""

    # P2-1 & P2-2: Execute workflow using YAML configuration
    execute_yaml_workflow "$DEFAULT_PROFILE" "multi-ai-enterprise-quality" "$task"
}

# Multi-AI Hybrid Development (Êé®Â•®)
# P2-1 & P2-2: YAML-driven with parallel execution
multi-ai-hybrid-development() {
    local task="$*"

    # P1-1: Input sanitization
    task=$(sanitize_input "$task") || return 1

    show_multi_ai_banner
    log_info "Task: $task"
    log_info "Profile: balanced-multi-ai (hybrid-development workflow)"
    log_info "Mode: YAML-driven with parallel execution (Êé®Â•®)"
    echo ""

    # P2-1 & P2-2: Execute workflow using YAML configuration
    execute_yaml_workflow "$DEFAULT_PROFILE" "multi-ai-hybrid-development" "$task"
}

# Multi-AI Consensus Review
# P2-1 & P2-2: YAML-driven with parallel execution
multi-ai-consensus-review() {
    local target="$*"

    # P1-1: Input sanitization
    target=$(sanitize_input "$target") || return 1

    show_multi_ai_banner
    log_info "Target: $target"
    log_info "Profile: balanced-multi-ai (consensus-review workflow)"
    log_info "Mode: YAML-driven with parallel execution"
    echo ""

    # P2-1 & P2-2: Execute workflow using YAML configuration
    execute_yaml_workflow "$DEFAULT_PROFILE" "multi-ai-consensus-review" "$target"
}

# ============================================================================
# ChatDev Workflows (1 function)
# ============================================================================

# Multi-AI ChatDev Development
# P2-1 & P2-2: YAML-driven with parallel execution
multi-ai-chatdev-develop() {
    local project="$*"

    # P1-1: Input sanitization
    project=$(sanitize_input "$project") || return 1

    show_multi_ai_banner
    log_info "Project: $project"
    log_info "Profile: balanced-multi-ai (chatdev-develop workflow)"
    log_info "Mode: Role-based development (CEO‚ÜíCTO‚ÜíProgrammers‚ÜíReviewer‚ÜíTester)"
    echo ""

    # P2-1 & P2-2: Execute workflow using YAML configuration
    execute_yaml_workflow "$DEFAULT_PROFILE" "multi-ai-chatdev-develop" "$project"
}
